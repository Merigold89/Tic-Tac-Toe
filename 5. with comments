"""
A program to play Tic-Tac-Toe

Author: KG
"""
import random


class TicTacToe:
    print('Welcome to the tic-tac-toe game!\nPlayer X starts the game.\nEnter: start_user/easy_user/easy '
          '(To play 3 parameters are needed!) or "exit"\nGood luck!')

    def __init__(self):
        TicTacToe.menu(self)
        self.win = 0
        self.game_finished = 0
        self.matrix = [[' ' for i in range(3)] for j in range(3)]
        self.player_sign = 'X'

    def matrix_reset(self):
        """
        Clears data from matrices and variables for a new gameplay.

        sets:
            0 win status - self.win = 0
            empty matrix 3x3 - self.matrix
            prints a blank matrix - TicTacToe.grid_printing(self)
        next:
            creates an empty matrix diagram with frames: TicTacToe.grid_printing(self)
        """
        self.player_sign = 'X'
        self.matrix = [[' ' for i in range(3)] for j in range(3)]
        self.win = 0
        self.game_finished = 0
        TicTacToe.grid_printing(self)

    def player(self):
        """
        Determines whether players 1 and 2 are computer or a player.
        """
        if self.player1 == "user":
            self.game_type1 = 'player'
        else:
            self.game_type1 = 'computer'
        if self.player2 == "user":
            self.game_type2 = 'player'
        else:
            self.game_type2 = 'computer'

    def player_move(self):
        """
        Defines the alternating movement of the players: X and O.

        next:
            if the player is a computer: TicTacToe.ai_game_easy(self)
            if the player is a user: TicTacToe.player_game(self)
        """
        while self.win == 0:
            if self.player_sign == 'X':
                if self.game_type1 == 'player':
                    TicTacToe.player_game(self)
                if self.game_type1 == 'computer':
                    TicTacToe.ai_game_easy(self)
            if self.player_sign == 'O':
                if self.game_type2 == 'player':
                    TicTacToe.player_game(self)
                if self.game_type2 == 'computer':
                    TicTacToe.ai_game_easy(self)

    def is_game_finished(self):
        """
        Checks if there are still free fields/cells in the matrix.

        returns:
            status of cells in the matrix: self.game_finished = 0/1
        next:
            if empty fields - sends back to check if someone has won: TicTacToe.game_win(self)
            if full fields - sends back to check if someone has won: TicTacToe.game_win(self)
        """
        empty_cells = 0
        for x in range(0, 3):
            for y in range(0, 3):
                empty_cells += self.matrix[x][y].count(' ')
        if empty_cells > 0:
            self.game_finished = 1  # there are empty cells
            TicTacToe.game_win(self)
        else:
            self.game_finished = 0  # all fields are full
            TicTacToe.game_win(self)

    def game_win(self):
        """
        Called after each move - checks to see if any of the players have won.

        returns:
            game win result: self.result
        next:
            sends to check the rules of the game: TicTacToe.rules(self)
        """
    # horizontal rows
        for i in range(3):
            if self.matrix[i].count(self.player_sign) == 3:
                self.win += 1
                self.result = f'{self.player_sign} wins\n'
    # vertical columns
        for i in range(3):
            if self.matrix[0][i] == self.matrix[1][i] == self.matrix[2][i] == self.player_sign:
                self.win += 1
                self.result = f'{self.player_sign} wins\n'
    # diagonals
        if self.matrix[0][0] == self.matrix[1][1] == self.matrix[2][2] == self.player_sign:
            self.win += 1
            self.result = f'{self.player_sign} wins\n'
        if self.matrix[2][0] == self.matrix[1][1] == self.matrix[0][2] == self.player_sign:
            self.win += 1
            self.result = f'{self.player_sign} wins\n'
        TicTacToe.rules(self)

    def rules(self):
        """
        Checks after each movement: the end of the game (win) or a draw.

        returns:
            Prints the game result: Win or Draw
        next:
            directs to enter data for a new game: TicTacToe.menu(self)
        """
        if ((self.win == 0) and (self.game_finished == 0)) is True:
            print('Draw\n')
            TicTacToe.menu(self)
        elif self.win == 1 or self.win == 2:
            print(self.result)
            TicTacToe.menu(self)

    def ai_game_easy(self):
        """
        Easy computer game level randomly selects an empty cell in the matrix.

        returns:
            matrix with printed AI movement: print(TicTacToe.grid_printing(self))
            False - to end the WHILE loop to validate cell selection by the AI
        next:
            if randomly selected cell is full - repeat the draw from the AI matrix
            after printing the matrix with the approved move: print(TicTacToe.grid_printing(self))
            change of the X / O sign: TicTacToe.change_sign(self)
            next player's move: TicTacToe.player_move(self)
        """
        while True:
            y = random.randrange(3)
            x = random.randrange(3)
            cell_status = self.matrix[x][y]
            if cell_status == 'X' or cell_status == 'O':  # double check that the drawn cell is free
                TicTacToe.ai_game_easy(self)
            else:
                print('Making move level "easy"')
                self.matrix[x][y] = self.player_sign
                print(TicTacToe.grid_printing(self))
                TicTacToe.change_sign(self)
                TicTacToe.player_move(self)
                return False

    def player_game(self):
        """
        Analyzes the coordinates entered by the player - whether they are correct - and introduces them to the matrix.

        returns:
            matrix with printed player movement: print(TicTacToe.grid_printing(self))
            False - to end the WHILE loop to validate the coordinates entered by the user
        next:
            if the coordinates are incorrectly entered - repeat entered
            after printing the matrix with the approved move: print(TicTacToe.grid_printing(self))
            change of the X / O sign: TicTacToe.change_sign(self)
            next player's move: TicTacToe.player_move(self)
        """
        while True:
            gamer_move = [x for x in input(f'Enter the coordinates: ')]
            delete = [' ', ',', ';']
            for x in gamer_move:
                if x in delete:  # if ' ' ',' ';' between the coordinates, delete it
                    gamer_move.remove(x)
            for x in gamer_move:
                if x.isalpha() is True:  # if letter - False and repeat input
                    print('You should enter numbers!')
                    return False
                elif 1 > int(x) or 3 < int(x):  # if coordinates are different than range 1-3  - False and repeat input
                    print('Coordinates should be from 1 to 3!')
                    return False
            x = int(gamer_move[0]) - 1
            y = int(gamer_move[1]) - 1
            if (self.matrix[x][y] == 'X') or (self.matrix[x][y] == 'O'):
                print('This cell is occupied! Choose another one!')
            else:
                self.matrix[x][y] = self.player_sign
                print(TicTacToe.grid_printing(self))
                TicTacToe.change_sign(self)
                TicTacToe.player_move(self)
                return False

    def change_sign(self):
        """
        After making a move it changes the X / O sign between players.
        """
        TicTacToe.is_game_finished(self)
        if self.player_sign == 'X':
            self.player_sign = 'O'
        elif self.player_sign == 'O':
            self.player_sign = 'X'

    def grid_printing(self):
        """
        Prints the matrix - empty at the beginning of the game and after each move made.

        returns:
            matrix (empty or filled) to be printed - with a frame
        """
        grid = "---------\n"
        for i in range(3):
            grid += "| " + " ".join(self.matrix[i]) + " |\n"
        grid += "---------"
        return grid

    def menu(self):
        """
        Checks the correctness of the entered player's choices and the type of game.

        next:
            if wrong data - asks you to enter again: TicTacToe.enter_data(self)
            resetting data to the game (matrix, variables): TicTacToe.matrix_reset(self)
            game matrix printing: print(TicTacToe.grid_printing(self))
            refers to defining the type of players (AI or user): TicTacToe.player(self)
        """
        game = tuple(input('Input command: ').split())
        if (len(game[1:]) == 2) and ('exit' not in game[1:]):
            print('Hello!')
            TicTacToe.matrix_reset(self)
            self.player1 = game[1:][0]
            self.player2 = game[1:][1]
            print(TicTacToe.grid_printing(self))
            TicTacToe.player(self)
            TicTacToe.player_move(self)
        elif game[0] == 'exit':
            print('Bye!')
            exit()
        else:
            print('Bad parameters!')
            TicTacToe.menu(self)

game = TicTacToe()
