import math
import random


class TicTacToe:
    print('Welcome to the tic-tac-toe game!\nPlayer X starts the game.\nEnter: start_user/easy_user/easy '
          '(To play 3 parameters are needed!) or "exit"\nGood luck!')

    def __init__(self):
        self.again = ' '
        self.empty = [' ', '_']
        TicTacToe.enter_data(self)

    def matrix_reset(self):
        self.player1 = str()
        self.player2 = str()
        self.cells_value = '_________'
        self.rows = []
        self.player_sign = 'X'
        self.matrix = ['11', '12', '13', '21', '22', '23', '31', '32', '33']
        for x in self.cells_value:  # replaced with a space
            if x == '_':
                self.rows.append(' ')
            else:
                self.rows.append(x)
        self.cells = dict.fromkeys(self.matrix)
        self.cells = {'11': self.rows[0], '12': self.rows[1], '13': self.rows[2],
                      '21': self.rows[3], '22': self.rows[4], '23': self.rows[5],
                      '31': self.rows[6], '32': self.rows[7], '33': self.rows[8]}
        self.win = 0
        self.game_finished = 0
        self.gamer_move = []
        TicTacToe.grid_printing(self)

    def player(self):
        if self.player1 == "user":
            self.game_type1 = 'player'
        else:
            self.game_type1 = 'computer'
        if self.player2 == "user":
            self.game_type2 = 'player'
        else:
            self.game_type2 = 'computer'
        TicTacToe.player_move(self)

    def player_game(self):
        while True:
            self.gamer_move = input(f'Enter the coordinates: ')
            self.gamer_move = [x for x in self.gamer_move]
            delete = [' ', ',', ';']
            letter = True
            coordinate = True
            for x in self.gamer_move:
                if x in delete:
                    self.gamer_move.remove(x)
            for x in self.gamer_move:
                if x.isalpha() is True:
                    letter = False
                elif 1 > int(x) or 3 < int(x):
                    coordinate = False
            if letter is False:
                print('You should enter numbers!')
            elif coordinate is False:
                print('Coordinates should be from 1 to 3!')
            else:
                self.gamer_move = ''.join(self.gamer_move)  # change to str
                cell_status = self.cells[self.gamer_move]
                if (cell_status == 'X') or (cell_status == 'O'):
                    print('This cell is occupied! Choose another one!')
                else:
                    self.cells[self.gamer_move] = self.player_sign
                    print(TicTacToe.grid_printing(self))
                    for x in self.matrix:
                        if x == self.gamer_move:
                            self.matrix.remove(x)
                    TicTacToe.change_sign(self)
                    TicTacToe.player_move(self)
                    return False

    def ai_game(self):
        while True:
            computer_choice = random.choice(self.matrix)
            cell_status = self.cells[computer_choice]
            if cell_status == 'X' or cell_status == 'O':  # double check that the drawn cell is free
                TicTacToe.ai_game(self)
            else:
                print('Making move level "easy"')
                self.cells[computer_choice] = self.player_sign
                print(TicTacToe.grid_printing(self))
                for x in self.matrix:
                    if x == computer_choice:
                        self.matrix.remove(x)
                TicTacToe.change_sign(self)
                TicTacToe.player_move(self)
                return False

    def player_move(self):
        TicTacToe.is_game_finished(self)
        while self.win == 0:
            if self.player_sign == 'X':
                if self.game_type1 == 'player':
                    TicTacToe.player_game(self)
                if self.game_type1 == 'computer':
                    TicTacToe.ai_game(self)
            if self.player_sign == 'O':
                if self.game_type2 == 'player':
                    TicTacToe.player_game(self)
                if self.game_type2 == 'computer':
                    TicTacToe.ai_game(self)

    def change_sign(self):
        if self.player_sign == 'X':
            self.player_sign = 'O'
        elif self.player_sign == 'O':
            self.player_sign = 'X'

    def grid_printing(self):
        # print('---------')
        # print(f'| {rows[0]} {rows[1]} {rows[2]} |')
        # print(f'| {rows[3]} {rows[4]} {rows[5]} |')
        # print(f'| {rows[6]} {rows[7]} {rows[8]} |')
        # print('---------')
        self.rows[0] = self.cells['11']
        self.rows[1] = self.cells['12']
        self.rows[2] = self.cells['13']
        self.rows[3] = self.cells['21']
        self.rows[4] = self.cells['22']
        self.rows[5] = self.cells['23']
        self.rows[6] = self.cells['31']
        self.rows[7] = self.cells['32']
        self.rows[8] = self.cells['33']
        return f"---------\n| {self.cells['11']} {self.cells['12']} {self.cells['13']} |" \
               f"\n| {self.cells['21']} {self.cells['22']} {self.cells['23']} |" \
               f"\n| {self.cells['31']} {self.cells['32']} {self.cells['33']} |\n---------"

    def is_game_finished(self):
        if (self.empty[0] in self.rows) or (self.empty[1] in self.rows):
            self.game_finished = 1  # there are empty cells
            TicTacToe.game_win(self)
        else:
            self.game_finished = 0  # all fields are full
            TicTacToe.game_win(self)

    def rules(self):
        if ((self.win == 0) and (self.game_finished == 0)) is True:
            print('Draw\n')
            TicTacToe.enter_data(self)
        elif self.win == 1 or self.win == 2:
            print(self.result)
            TicTacToe.enter_data(self)

    def game_win(self):
    # horizontal rows
        if all((self.rows[1] == self.rows[0], self.rows[2] == self.rows[0], self.rows[0] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[0]} wins\n'
        if all((self.rows[4] == self.rows[3], self.rows[5] == self.rows[3], self.rows[3] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[3]} wins\n'
        if all((self.rows[7] == self.rows[6], self.rows[8] == self.rows[6], self.rows[6] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[6]} wins\n'
    # vertical columns
        if all((self.rows[3] == self.rows[0], self.rows[6] == self.rows[0], self.rows[0] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[0]} wins\n'
        if all((self.rows[1] == self.rows[4], self.rows[1] == self.rows[7], self.rows[1] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[1]} wins\n'
        if all((self.rows[5] == self.rows[2], self.rows[8] == self.rows[5], self.rows[2] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[2]} wins\n'
    # diagonals
        if all((self.rows[4] == self.rows[0], self.rows[8] == self.rows[0], self.rows[0] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[0]} wins\n'
        if all((self.rows[4] == self.rows[2], self.rows[6] == self.rows[2], self.rows[2] not in self.empty)) is True:
            self.win += 1
            self.result = f'{self.rows[2]} wins\n'
        TicTacToe.rules(self)

    def menu(self):
        command1 = self.game[0]
        game_players = self.game[1:]
        if (len(game_players) == 2) and ('exit' not in game_players):
            print('Hello!')
            TicTacToe.matrix_reset(self)
            self.player1 = game_players[0]
            self.player2 = game_players[1]
            print(TicTacToe.grid_printing(self))
            TicTacToe.player(self)
        elif command1 == 'exit':
            print('Bye!')
            exit()
        else:
            print('Bad parameters!')
            TicTacToe.enter_data(self)

    def enter_data(self):
        self.game = tuple(input('Input command: ').split())
        TicTacToe.menu(self)


game = TicTacToe()
